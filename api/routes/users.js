/**
 * Express Router
 */
const express = require('express');
const rout = express.Router();
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');

//Middleware
const emailCheck = require('../middleware/check-email');
const userValidation = require('../middleware/user-validation');


 //MySql connection to DataBase
const mysql = require('mysql');
const sqlConnection = mysql.createConnection({
    host: "localhost",
    user: "root",
    password: "123456",
    database: "products_db"
});
sqlConnection.connect(function (err) {
    if (err) throw err;
});


//Routes
const User = require('../models/user');

rout.post('/signup', userValidation, emailCheck, (req, res) => {
    //Encrypting the password given by the user
    
    bcrypt.hash(req.body.password, 5, (err, hash) => {
        if (err) {
            return res.status(500).json({error: err});
        } else {
            //Create new user using the hash, id is generated by the Class User
            const user = new User(req.body.email, hash, req.body.name, req.body.lastname, req.body.phone);
            sqlConnection.query('call add_user(?, ?, ?, ?, ?, ?)', [user.id, user.email, user.password, user.name, user.lastname, user.phone], (err, result) => {
                if (err) {
                    //1062 is MySql Error for duplication field on Unique Column
                    if (err.errno == 1062) {
                        return res.status(409).json({error: "email is already taken"});
                    } else {
                        //SQL or Request Error
                        return res.status(500).json({error: err});
                    }
                } else {
                    //User has been created!
                    return res.status(201).json({result: result});
                }
            });
        }
    });
});

rout.post('/login', (req, res, next) => {
    //Verifying if user do exists
    sqlConnection.query('call get_user(?)', [req.body.email], (err, result) => {
        if (err) {
            return res.status(500).json({error: err});
        } else {
            //Check the array length
            console.log(res);
            if (result[0].length < 1) {
                return res.status(401).json({error: "Login Error"});
            } else {
                //result[0][0] --> is the goten user
                //Create the instance of user
                const user = result[0][0];
                //compare passwords
                bcrypt.compare(req.body.password, user.password, (err, result) => {
                    //err while executing functions... does not mean passwords arent equal
                    if (err) {
                        return res.status(401).json({error: err});
                    } else {
                        //result can be true or false
                        if (result) {
                            //Create a Sign Token using Json Web Token Library
                            const token = jwt.sign(
                                {email: user.email, id: user.id},
                                'secret',
                                {expiresIn: "1h"},
                            );
                            return res.status(200).json({message: "Login Successful", token: token});
                        } else {
                            return res.status(401).json({error: "Login Error"});
                        }
                    }
                });
            }
        }
    });
});

rout.delete('/', (req, res) => {
    sqlConnection.query('call delete_user(?)', [req.body.id], (err, result) => {
        if (err) {
            return res.status(500).json({error: err});
        } else {
            return res.status(200).json({result: result});
        }
    });
});


module.exports = rout;